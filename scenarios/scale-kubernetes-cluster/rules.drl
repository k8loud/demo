import io.github.hephaestusmetrics.model.metrics.Metric
import org.k8loud.executor.actions.openstack.AddInstanceAction
import org.k8loud.executor.actions.openstack.GetServerNamesAction
import org.k8loud.executor.actions.command.CommandAction
import org.k8loud.executor.actions.command.CustomScriptAction
import org.k8loud.executor.actions.command.DetachNodeFromKubernetesClusterAction
import org.k8loud.executor.actions.openstack.DeleteInstanceAction
import org.k8loud.executor.model.ExecutionExitCode
import java.util.List

dialect "mvel"

global org.k8loud.executor.drools.UsableServices usableServices;
global org.k8loud.executor.drools.CronChecker cronChecker;

rule "scale-kubernetes-cluster-up"
    when
        clusterMemoryUsage : Metric(
            queryTag == "cluster-memory-usage",
            clusterMemoryUsageValue : value
        )
        clusterCpuUsage : Metric(
            queryTag == "cluster-cpu-usage",
            clusterCpuUsageValue : value
        )
        clusterFilesystemUsage : Metric(
            queryTag == "cluster-filesystem-usage",
            clusterFilesystemUsageValue : value
        )
        eval((clusterMemoryUsageValue > 70 ||
            clusterCpuUsageValue > 70 ||
            clusterFilesystemUsageValue > 70) &&
            cronChecker.checkPatternForSession("0 0/2 * ? * * *"))
    then
        System.out.println("Processing 'scale-kubernetes-cluster-up'...");

        AddInstanceAction.builder()
            .region("RegionOne")
            .name("kube-worker-auto-scaled")
            .imageId("70a1dc73-f794-439f-8dd2-9e5cf8a73d5a")
            .flavorId("414a6a89-57c3-4331-9a05-0a53fc9a7d02")
            .keypairName("default")
            .securityGroup(null)
            .userData("#!/bin/bash\nsudo apt -y install nmap\nsudo cp /home/ubuntu/kubernetes-lab-setup/configs/" +
                "join_cluster.service /etc/systemd/system/join_cluster.service\nchmod +x /home/ubuntu/kubernetes-lab-" +
                "setup/scripts/kube_setup/join_cluster.sh\nsudo systemctl enable join_cluster.service\nsudo systemctl" +
                " start join_cluster.service")
            .count(1)
            .waitActiveSec(1)
            .openstackService(usableServices.getOpenstackService())
            .build()
            .execute();

        System.out.println("...Processed 'scale-kubernetes-cluster-up'");
end

rule "scale-kubernetes-cluster-down"
    when
        clusterMemoryUsage : Metric(
            queryTag == "cluster-memory-usage",
            clusterMemoryUsageValue : value
        )
        clusterCpuUsage : Metric(
            queryTag == "cluster-cpu-usage",
            clusterCpuUsageValue : value
        )
        clusterFilesystemUsage : Metric(
            queryTag == "cluster-filesystem-usage",
            clusterFilesystemUsageValue : value
        )
        eval((clusterMemoryUsageValue < 50 &&
            clusterCpuUsageValue < 50 &&
            clusterFilesystemUsageValue < 50) &&
            cronChecker.checkPatternForSession("0 0/2 * ? * * *"))
    then
        System.out.println("Processing 'scale-kubernetes-cluster-down'...");

        // 1. List nodes
        executionRS = GetServerNamesAction.builder()
            .region("RegionOne")
            .namePattern("kube-worker-auto-scaled-.*")
            .openstackService(usableServices.getOpenstackService())
            .build()
            .execute();

        if (executionRS.getExitCode() == ExecutionExitCode.OK) {
            serverNames = (List) executionRS.getAdditionalData().get("serverNames");
            if (serverNames.size() == 0) {
                System.out.println("There are no nodes to be scaled down");
            } else {
                nodeIdx = 0;
                while (nodeIdx < serverNames.size()) {
                    nodeName = (String) serverNames.get(nodeIdx);
                    // 2. Send detach node commands to the master node
                    executionRS = DetachNodeFromKubernetesClusterAction.builder()
                        .host("<MASTER_IP>")
                        .port(22)
                        .privateKey("<MASTER_PKEY>")
                        .user("ubuntu")
                        .nodeName(nodeName)
                        .commandExecutionService(usableServices.getCommandExecutionService())
                        .build()
                        .execute();
                    if (executionRS.getExitCode() == ExecutionExitCode.OK ||
                        ("Error from server (NotFound): nodes \"" + nodeName + "\" not found\n")
                        .equals((String) executionRS.getAdditionalData().get("stderr"))) {
                        // 3. OK: Delete the detached node VM
                        // NOT_OK: Delete the node VM because it's either redundant or tainted
                        DeleteInstanceAction.builder()
                            .region("RegionOne")
                            .namePattern(nodeName)
                            .openstackService(usableServices.getOpenstackService())
                            .build()
                            .execute();
                    }
                }
                if (executionRS.getExitCode() == ExecutionExitCode.OK) {
                    // break
                    nodeIdx = serverNames.size();
                } else {
                    nodeIdx = nodeIdx + 1;
                }
            }
        }

        System.out.println("...Processed 'scale-kubernetes-cluster-down'");
end
